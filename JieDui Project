import java.io.*;
import java.util.*;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.HashMap;
import java.util.Stack;
import java.util.Random;
public class Test {
    public static void main(String[] args) {
        System.out.println("0.生成四则运算");
        System.out.println("1.答案比较");
        System.out.print("请选择：");
        int num = new Scanner(System.in).nextInt();
        switch(num){
            case 0 :
                Producer producer = new Producer();
                producer.designProblem();
                break;
            case 1:
                Judge judge = new Judge();
                judge.start();
                break;
            default:
                System.out.println("输入错误");
                main(args);
                break;
        }
    }
}
class Producer{
    public void designProblem(){
        try{
            Scanner scanner = new Scanner(System.in);
            System.out.print("请输入生成运算个数：");
            int number = scanner.nextInt();
            System.out.print("请输入操作数最大数值范围（以自然数为准）：");
            int max = scanner.nextInt();
            produceProblem(number, max);
        }catch (InputMismatchException e){
            System.out.println("请输入数字。\n\n\n");
            designProblem();
        }catch (IOException e){
            System.out.println("文件创建失败");
        }
    }
    public void produceProblem(int num, int max) throws IOException {
        File exercises = new File("Exercises.txt");
        File answers = new File("Answers.txt");
        if(exercises.exists() || answers.exists()){
            exercises.delete();
            answers.delete();

        }
        if(exercises.createNewFile() && answers.createNewFile()){
            FileOutputStream exercisesOutput = new FileOutputStream(exercises);
            PrintStream exercisesPrintStream = new PrintStream(exercisesOutput);

            FileOutputStream answersOutput = new FileOutputStream(answers);
            PrintStream answersPrintStream = new PrintStream(answersOutput);
            Random random = new Random();

            Integer integer = new Integer();
            Fraction fraction = new Fraction();

            String[] problem = new String[2];
            for(int i = 1; i <= num; i++){
                int randomnum = random.nextInt(2);
                if(randomnum == 0){
                    problem = fraction.creatFractionProblem(max);
                }else{
                    problem = integer.creatIntegerProblem(max);
                }
                outputFile(i, problem, exercisesPrintStream, answersPrintStream);
            }
            exercisesOutput.close();
            answersOutput.close();
            exercisesPrintStream.close();
            answersPrintStream.close();
        }
    }
    public void outputFile(int i, String[] problem, PrintStream...var){
        try{
            var[0].println(i + ". " + problem[0]);
            var[1].println(i + ". " + problem[1]);
        }catch (ArrayIndexOutOfBoundsException e){
            System.out.println("程序出错");
        }
    }


}


class Integer {
    public static final String[] operator = {"+", "-", "*", "/"};
    public String[] creatIntegerProblem(int max) {
        Random random = new Random();
        int operatorNum = 1 + random.nextInt(3);//操作符个数
        int[] operands = new int[operatorNum + 1];//操作数个数
        int[] operandsIndex = index(operatorNum, 4, random);

        for (int i = 0; i < operatorNum + 1; i++) {
            operands[i] = random.nextInt(max);//生成随机整数
        }

        String formula = stitchingFormula(operatorNum, operands, operandsIndex);

        //计算结果
        Calculator calculator = new Calculator();
        int res = calculator.algorithem(formula);
        String[] formulaRes = new String[2];

        if (res > 0) {
            formulaRes[0] = formula;
            formulaRes[1] = String.valueOf(res);
        } else {
            return creatIntegerProblem(max);
        }
        return formulaRes;
    }
    //生成随机操作符
    public int[] index(int operatorNum, int operatorTotalNum, Random random){
        int similar = 0;
        int[] operatorIndex = new int[operatorNum];
        for(int i = 0; i < operatorNum; i++){
            operatorIndex[i] = random.nextInt(operatorTotalNum);
        }
        for(int i : operatorIndex){
            if(operatorIndex[0] == i){
                similar++;
            }
        }
        if(similar == operatorNum && operatorNum != 1){//至少有两个不同操作符
            return index(operatorNum,operatorTotalNum,random);
        }else{
            return operatorIndex;
        }
    }

    //拼接式子
    public String stitchingFormula(int operatorNum, int[] operands, int[] operatorIndex) {
        int bracketForm = new Random().nextInt(2);//式子形态
        StringBuilder formula = new StringBuilder();
        switch (operatorNum) {
            case 1 :
                //1+2型
                formula.append(operands[0])
                        .append(" ")
                        .append(operator[operatorIndex[0]])
                        .append(" ")
                        .append(operands[1])
                        .append(" ")
                        .append("=");
            case 2:
                //1+2+3型
                if(bracketForm == 0) {
                    formula.append(operands[0])
                    .append(" ")
                    .append(operator[operatorIndex[0]])
                    .append(" ")
                    .append(operands[1])
                    .append(" ")
                    .append(operator[operatorIndex[1]])
                    .append(" ")
                    .append(operands[2])
                    .append(" ")
                    .append("=");
                }else{
                    //1+（2+3）
                    formula.append(operands[0])
                    .append(" ")
                    .append(operator[operatorIndex[0]])
                    .append(" ")
                    .append("(")
                    .append(" ")
                    .append(operands[1])
                    .append(" ")
                    .append(operator[operatorIndex[1]])
                    .append(" ")
                    .append(operands[2])
                    .append(" ")
                    .append(")")
                    .append(" ")
                    .append("=");
                }
                break;
            case 3:
                if (bracketForm == 0){
                    //1+((2+3)-4)型
                    formula.append(operands[0])
                            .append(" ")
                            .append(operator[operatorIndex[0]])
                            .append(" ")
                            .append("((")
                            .append(" ")
                            .append(operands[1])
                            .append(" ")
                            .append(operator[operatorIndex[1]])
                            .append(" ")
                            .append(operands[2])
                            .append(" ")
                            .append(")")
                            .append(" ")
                            .append(operator[operatorIndex[2]])
                            .append(" ")
                            .append(operands[3])
                            .append(" ")
                            .append(")")
                            .append(" ")
                            .append("=");
                }else {
                    //(1+2)+(3+4)型
                    formula.append("(")
                            .append(" ")
                            .append(operands[0])
                            .append(" ")
                            .append(operator[operatorIndex[0]])
                            .append(" ")
                            .append(operands[1])
                            .append(" ")
                            .append(")")
                            .append(" ")
                            .append(operator[operatorIndex[1]])
                            .append(" ")
                            .append("(")
                            .append(" ")
                            .append(operands[2])
                            .append(" ")
                            .append(operator[operatorIndex[2]])
                            .append(" ")
                            .append(operands[3])
                            .append(" ")
                            .append(")")
                            .append(" ")
                            .append("=");
                }
                break;
        }
        return  formula.toString();
    }
}
class Fraction{
    public static final String[] operator = {"+", "-"};
    public String[] creatFractionProblem(int max){
        Random random = new Random();
        int operatorNum = 1 + random.nextInt(3);

        Integer integer = new Integer();
        int[] operatorIndex = integer.index(operatorNum, 2 , random);//存放操作符的下标
        //生成第一个操作数
        int[] n1 = creatNum(max, random);
        int x = n1[0];
        int y = n1[1];

        String str = shamToProperFraction(x, y);
        //StringBuilder str = new StringBuilder(shamToProperFraction(x, y));

        for(int i = 0; i < operatorNum; i++) {
            //生成剩下的操作数
            int[] n = creatNum(max, random);
            int nx = n[0];
            int ny = n[1];

            String currentoperator = operator[operatorIndex[i]];

            if(currentoperator.equals("+")){
                x = (x * ny) + y * nx;
                y = y * ny;
            }else{
                int count = 0;
                while(x * ny - y * nx < 0){//差为负数
                    n = creatNum(max, random);
                    nx = n[0];
                    ny = n[1];
                    count++;
                    if(count >= 5){
                        nx = x - 1;
                        ny = y;
                    }
                }
                x = x * ny - y * nx;
                y = y * ny;
            }

            String num = shamToProperFraction(x, y);
            str +=  currentoperator + num;
            //str.append(currentoperator).append(num);
        }

        int publicfactor = publicFactor(x, y);
        x /= publicfactor; // 最终结果化简
        y /= publicfactor;

        String res = shamToProperFraction(x, y);
        str += "=";
        //str.append("=");
        //return new String[]{str.toString(), res};
        String[] formulaRes = {str, res};
        return formulaRes;
    }
    // publicFactor 求最大公因数
    public int publicFactor(int x, int y){
        while(true){
            if(x % y == 0){
                return y;
            }
            int tmp = y;
            y = x % y;
            x = tmp;
        }
    }
    public int[] creatNum(int max, Random random){
        int x = 1 + random.nextInt(max);
        int y = 1 + random.nextInt(max);
        int publicfactor = publicFactor(x, y);
        x /= publicfactor;
        y /= publicfactor;

        int[] numbers = {x, y};
        return numbers;
        //return new int[]{x, y};
    }
    public String shamToProperFraction(int x, int y){
        if(x > y){
            int n = x / y;
            x = (x - n * y);
            if(x == 0){
                return String.valueOf(n);
            }
            return n + "'" + x + "/" + y;
        }else if(x == y){
            return "1";
        } else if (y == 1) {
            return String.valueOf(x);
        } else if (x == 0) {
            return "0";
        }
        return x + "/" + y;
    }

}
class Calculator {
    public int algorithem(String str) {
        Stack<java.lang.Integer> numStack = new Stack<>();
        Stack<String> operatorStack = new Stack<>();
        HashMap<String, java.lang.Integer> hashMap = new HashMap<>();
        hashMap.put("(", 0);
        hashMap.put("+", 1);
        hashMap.put("-", 1);
        hashMap.put("*", 2);
        hashMap.put("/", 2);

        String formula = str.replaceAll(" ", "");

        for (int i = 0; i < formula.length(); ) {
            StringBuilder digit = new StringBuilder();
            char c = formula.charAt(i);//式子字符串切割为c字符
            while (Character.isDigit(c)) { //判断字符是否为10进制数字,将第一个数加入digit
                digit.append(c);
                i++;
                if (i < formula.length()) {
                    c = formula.charAt(i);
                } else {
                    break;
                }
            }
            if (digit.length() == 0) {//当前digit里面无数字，处理当前符号
                switch (c) {
                    case '(': {
                        operatorStack.push(String.valueOf(c));//( 转换字符串压入字符栈
                        break;
                    }
                    case ')': {//遇到右括号了计算
                        String stmp = operatorStack.pop();//如果是)，将符号栈顶元素取到
                        while (!operatorStack.isEmpty() && !stmp.equals("(")) {//还有加减乘除符号
                            int a = numStack.pop();//取操作数
                            int b = numStack.pop();
                            int result = calculate(b, a, stmp);
                            if (result < 0) {
                                return -1;
                            }
                            numStack.push(result);
                            stmp = operatorStack.pop();
                        }
                        break;
                    }
                    case '=': {
                        String stmp;
                        while (!operatorStack.isEmpty()) {
                            stmp = operatorStack.pop();
                            int a = numStack.pop();
                            int b = numStack.pop();
                            int result = calculate(b, a, stmp);
                            if (result < 0) {
                                return -1;
                            }
                            numStack.push(result);
                        }
                        break;
                    }
                    default: {
                        String stmp;
                        while (!operatorStack.isEmpty()) {
                            stmp = operatorStack.pop();
                            if (hashMap.get(stmp) >= hashMap.get(String.valueOf(c))) {
                                int a = numStack.pop();
                                int b = numStack.pop();
                                int result = calculate(b, a, stmp);
                                if (result < 0) {
                                    return -1;
                                }
                                numStack.push(result);
                            } else {
                                operatorStack.push(stmp);
                                break;
                            }
                            operatorStack.push(String.valueOf(c));
                            break;
                        }
                    }
                }
            } else {
                numStack.push(java.lang.Integer.valueOf(digit.toString()));
                continue;
            }
            i++;
        }
        return numStack.peek();//返回栈顶数字即答案
    }
    public int calculate(int a, int b, String tmp){
        int res = 0;
        char c = tmp.charAt(0);
        switch (c){
            case '+':
                res = a + b;
                break;
            case '-':
                res = a - b;
                break;
            case '*':
                res = a * b;
                break;
            case '/':
                if(b == 0){
                    return -1;
                } else if (a % b !=0) { // 产生小数就不合格？？
                    return -2;
                }else{
                    res = a / b;
                }
                break;
        }
        return res;
    }

}

class Judge{
    public void start(){
        System.out.print("请输入待验证答案路径：");
        Scanner scanner = new Scanner(System.in);
        String ExerciseFilePath = scanner.next();
        System.out.print("请输入程序生成答案文件路径：");
        String AnswerFilePath = scanner.next();
        Fileoperation fileoperation = new Fileoperation();

        try{
            List<String> exerciseAnswers = fileoperation.exerciseFileReader(ExerciseFilePath);
            List<String> answers = fileoperation.answerFileReader(AnswerFilePath);

            List<String> correct = new ArrayList<>();
            List<String> wrong = new ArrayList<>();

            int min = Math.min(exerciseAnswers.size(), answers.size());
            int num = 1;
            for(int i = 0; i < min; i++){
                if(exerciseAnswers.get(i).equals(answers.get(i))){
                    correct.add(String.valueOf(num++));
                }else{
                    wrong.add(String.valueOf(num++));
                }
            }

            File grade = new File("Grade.txt");
            if(grade.exists()){
                grade.delete();
            }

            if(grade.createNewFile()){
                FileOutputStream gradeOutput = new FileOutputStream(grade);
                PrintStream gradePrintStream = new PrintStream(gradeOutput);
                String corrects = String.join(",", correct);
                gradePrintStream.println("Correct:" + correct.size() + "(" + corrects + ")");
                String wrongs = String.join(",", wrong);
                gradePrintStream.println("Wrong:" + wrong.size() + "(" + wrongs + ")");
            }

        }catch(FileNotFoundException e){
            System.out.println("文件不存在");
        }catch (IOException e){
            System.out.println("文件读入异常");
        }

    }
}
class Fileoperation{
    public List<String> exerciseFileReader(String ExerciseFilePath) throws IOException{
        BufferedReader exerciseReader = new BufferedReader(new FileReader(ExerciseFilePath));
        String exerciseAnswer = "";
        List<String> exerciseAnswers = new ArrayList<>();
        while((exerciseAnswer = exerciseReader.readLine()) != null){
            String[] split = exerciseAnswer.split("=");
            if(split.length >= 2){
                exerciseAnswers.add(split[1]);
            }else{
                exerciseAnswers.add(" ");
            }
        }
        return exerciseAnswers;
    }
    public List<String> answerFileReader(String AnswerFilePath) throws IOException{
        BufferedReader answerReader = new BufferedReader(new FileReader(AnswerFilePath));
        String answer = "";
        List<String> answers = new ArrayList<>();
        while((answer = answerReader.readLine()) != null){
            String[] split = answer.split(" ");
            answers.add(split[1]);
        }
        return answers;
    }
}
